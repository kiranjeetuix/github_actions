# name: Build and Publish Docker image on Dockerhub
# on:
#   push:
#     branches: [main]

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - name: Login to Dockerhub_
#         uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_TOKEN }}

#       # - name: Create .env file
#       #   run: echo "${{ secrets.ENV }}" | base64 -d > .env

#       - name: Build and tag Docker image
#         run: |
#           docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nestjs-example:latest .

#       - name: Push Docker image
#         run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nestjs-example:latest

#       # - name: Update image metadata
#       #   uses: docker/metadata-action@v5
#       #   with:
#       #     images: ${{ secrets.DOCKER_HUB_USERNAME }}/nestjs-example:latest
#       #     tags: |
#       #       type=sha
#       #     labels: |
#       #       org.opencontainers.image.title=NestJS Example
#       #       org.opencontainers.image.description=Example NestJS application
#       #       org.opencontainers.image.url=https://github.com/${{github.repository}}
#       #       org.opencontainers.image.revision=${{github.sha}}
#       #       org.opencontainers.image.licenses=MIT






# name: Deploy Docker Container to EC2 using Github Actions 

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     name: Deploy to EC2
#     runs-on: ubuntu-latest
#     env:
#       PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#       HOSTNAME: ${{ secrets.EC2_URL }}
#       USER_NAME: ${{ secrets.EC2_USERNAME }}
#       REPO_URL: https://github.com/kiranjeetuix/github_actions.git
#       PROJECT_DIRECTORY: /path/to/project  # Update this to your project's directory path
#       DOCKER_IMAGE_NAME: your-docker-image-name
#       DOCKER_HUB_USERNAME: your-dockerhub-username
#       DOCKER_IMAGE_TAG: latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Setup SSH and Deploy
#         run: |
#           echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key
#           chmod 600 private_key
#           ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << 'EOF'
#             set -e

#             # Update package index and install Docker if not already installed
#             if ! command -v docker &> /dev/null; then
#               sudo apt update
#               sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
#               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#               sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#               sudo apt update
#               sudo apt install -y docker-ce
#               sudo usermod -aG docker $USER
#             fi

#             # Clone or pull the Git repository
#             if [ -d "${{ secrets.PROJECT_DIRECTORY }}/.git" ]; then
#               echo "Git repository already exists. Pulling latest changes..."
#               cd ${{ secrets.PROJECT_DIRECTORY }}
#               git pull
#             else
#               echo "Cloning repository into ${{ secrets.PROJECT_DIRECTORY }}..."
#               git clone ${{ secrets.REPO_URL }} ${{ secrets.PROJECT_DIRECTORY }}
#               cd ${{ secrets.PROJECT_DIRECTORY }}
#             fi

#             # Build the new Docker image
#             docker build -t ${{secrets.DOCKER_IMAGE_NAME}}:latest .

#             # Stop the old container (if running)
#             if [ "$(docker ps -q -f name=${{secrets.DOCKER_IMAGE_NAME}})" ]; then
#               docker stop ${{secrets.DOCKER_IMAGE_NAME}}
#               docker rm ${{secrets.DOCKER_IMAGE_NAME}}
#             fi

#             # Run the new container
#             docker run -d --name ${{secrets.DOCKER_IMAGE_NAME}} -p 3000:3000 ${{secrets.DOCKER_IMAGE_NAME}}:latest
#             echo "Building the Docker image"

#             # Exit the SSH session
#           EOF



name: Build and push image to ECR

on: push
  

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: example-ecr
        IMAGE_TAG: example-docker
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        #deploy 2
